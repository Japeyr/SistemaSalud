#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sistema_Salud
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SistemaSalud")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertPacientes(Pacientes instance);
    partial void UpdatePacientes(Pacientes instance);
    partial void DeletePacientes(Pacientes instance);
    partial void InsertMedicos(Medicos instance);
    partial void UpdateMedicos(Medicos instance);
    partial void DeleteMedicos(Medicos instance);
    partial void InsertCitas(Citas instance);
    partial void UpdateCitas(Citas instance);
    partial void DeleteCitas(Citas instance);
    partial void InsertTratamientos(Tratamientos instance);
    partial void UpdateTratamientos(Tratamientos instance);
    partial void DeleteTratamientos(Tratamientos instance);
    partial void InsertHistorialMedico(HistorialMedico instance);
    partial void UpdateHistorialMedico(HistorialMedico instance);
    partial void DeleteHistorialMedico(HistorialMedico instance);
    partial void InsertFacturacion(Facturacion instance);
    partial void UpdateFacturacion(Facturacion instance);
    partial void DeleteFacturacion(Facturacion instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Sistema_Salud.Properties.Settings.Default.SistemaSaludConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Pacientes> Pacientes
		{
			get
			{
				return this.GetTable<Pacientes>();
			}
		}
		
		public System.Data.Linq.Table<Medicos> Medicos
		{
			get
			{
				return this.GetTable<Medicos>();
			}
		}
		
		public System.Data.Linq.Table<Citas> Citas
		{
			get
			{
				return this.GetTable<Citas>();
			}
		}
		
		public System.Data.Linq.Table<Tratamientos> Tratamientos
		{
			get
			{
				return this.GetTable<Tratamientos>();
			}
		}
		
		public System.Data.Linq.Table<HistorialMedico> HistorialMedico
		{
			get
			{
				return this.GetTable<HistorialMedico>();
			}
		}
		
		public System.Data.Linq.Table<Facturacion> Facturacion
		{
			get
			{
				return this.GetTable<Facturacion>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pacientes")]
	public partial class Pacientes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PacienteID;
		
		private string _Nombre;
		
		private string _Apellido;
		
		private System.Nullable<System.DateTime> _FechaNacimiento;
		
		private System.Nullable<char> _Genero;
		
		private string _Direccion;
		
		private string _Telefono;
		
		private string _Email;
		
		private System.Nullable<int> _Documento;
		
		private EntitySet<Citas> _Citas;
		
		private EntitySet<Tratamientos> _Tratamientos;
		
		private EntitySet<HistorialMedico> _HistorialMedico;
		
		private EntitySet<Facturacion> _Facturacion;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPacienteIDChanging(int value);
    partial void OnPacienteIDChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnApellidoChanging(string value);
    partial void OnApellidoChanged();
    partial void OnFechaNacimientoChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaNacimientoChanged();
    partial void OnGeneroChanging(System.Nullable<char> value);
    partial void OnGeneroChanged();
    partial void OnDireccionChanging(string value);
    partial void OnDireccionChanged();
    partial void OnTelefonoChanging(string value);
    partial void OnTelefonoChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnDocumentoChanging(System.Nullable<int> value);
    partial void OnDocumentoChanged();
    #endregion
		
		public Pacientes()
		{
			this._Citas = new EntitySet<Citas>(new Action<Citas>(this.attach_Citas), new Action<Citas>(this.detach_Citas));
			this._Tratamientos = new EntitySet<Tratamientos>(new Action<Tratamientos>(this.attach_Tratamientos), new Action<Tratamientos>(this.detach_Tratamientos));
			this._HistorialMedico = new EntitySet<HistorialMedico>(new Action<HistorialMedico>(this.attach_HistorialMedico), new Action<HistorialMedico>(this.detach_HistorialMedico));
			this._Facturacion = new EntitySet<Facturacion>(new Action<Facturacion>(this.attach_Facturacion), new Action<Facturacion>(this.detach_Facturacion));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PacienteID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PacienteID
		{
			get
			{
				return this._PacienteID;
			}
			set
			{
				if ((this._PacienteID != value))
				{
					this.OnPacienteIDChanging(value);
					this.SendPropertyChanging();
					this._PacienteID = value;
					this.SendPropertyChanged("PacienteID");
					this.OnPacienteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Apellido", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Apellido
		{
			get
			{
				return this._Apellido;
			}
			set
			{
				if ((this._Apellido != value))
				{
					this.OnApellidoChanging(value);
					this.SendPropertyChanging();
					this._Apellido = value;
					this.SendPropertyChanged("Apellido");
					this.OnApellidoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FechaNacimiento", DbType="Date")]
		public System.Nullable<System.DateTime> FechaNacimiento
		{
			get
			{
				return this._FechaNacimiento;
			}
			set
			{
				if ((this._FechaNacimiento != value))
				{
					this.OnFechaNacimientoChanging(value);
					this.SendPropertyChanging();
					this._FechaNacimiento = value;
					this.SendPropertyChanged("FechaNacimiento");
					this.OnFechaNacimientoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Genero", DbType="Char(1)")]
		public System.Nullable<char> Genero
		{
			get
			{
				return this._Genero;
			}
			set
			{
				if ((this._Genero != value))
				{
					this.OnGeneroChanging(value);
					this.SendPropertyChanging();
					this._Genero = value;
					this.SendPropertyChanged("Genero");
					this.OnGeneroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Direccion", DbType="VarChar(200)")]
		public string Direccion
		{
			get
			{
				return this._Direccion;
			}
			set
			{
				if ((this._Direccion != value))
				{
					this.OnDireccionChanging(value);
					this.SendPropertyChanging();
					this._Direccion = value;
					this.SendPropertyChanged("Direccion");
					this.OnDireccionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telefono", DbType="VarChar(15)")]
		public string Telefono
		{
			get
			{
				return this._Telefono;
			}
			set
			{
				if ((this._Telefono != value))
				{
					this.OnTelefonoChanging(value);
					this.SendPropertyChanging();
					this._Telefono = value;
					this.SendPropertyChanged("Telefono");
					this.OnTelefonoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Documento", DbType="Int")]
		public System.Nullable<int> Documento
		{
			get
			{
				return this._Documento;
			}
			set
			{
				if ((this._Documento != value))
				{
					this.OnDocumentoChanging(value);
					this.SendPropertyChanging();
					this._Documento = value;
					this.SendPropertyChanged("Documento");
					this.OnDocumentoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pacientes_Citas", Storage="_Citas", ThisKey="PacienteID", OtherKey="PacienteID")]
		public EntitySet<Citas> Citas
		{
			get
			{
				return this._Citas;
			}
			set
			{
				this._Citas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pacientes_Tratamientos", Storage="_Tratamientos", ThisKey="PacienteID", OtherKey="PacienteID")]
		public EntitySet<Tratamientos> Tratamientos
		{
			get
			{
				return this._Tratamientos;
			}
			set
			{
				this._Tratamientos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pacientes_HistorialMedico", Storage="_HistorialMedico", ThisKey="PacienteID", OtherKey="PacienteID")]
		public EntitySet<HistorialMedico> HistorialMedico
		{
			get
			{
				return this._HistorialMedico;
			}
			set
			{
				this._HistorialMedico.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pacientes_Facturacion", Storage="_Facturacion", ThisKey="PacienteID", OtherKey="PacienteID")]
		public EntitySet<Facturacion> Facturacion
		{
			get
			{
				return this._Facturacion;
			}
			set
			{
				this._Facturacion.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Citas(Citas entity)
		{
			this.SendPropertyChanging();
			entity.Pacientes = this;
		}
		
		private void detach_Citas(Citas entity)
		{
			this.SendPropertyChanging();
			entity.Pacientes = null;
		}
		
		private void attach_Tratamientos(Tratamientos entity)
		{
			this.SendPropertyChanging();
			entity.Pacientes = this;
		}
		
		private void detach_Tratamientos(Tratamientos entity)
		{
			this.SendPropertyChanging();
			entity.Pacientes = null;
		}
		
		private void attach_HistorialMedico(HistorialMedico entity)
		{
			this.SendPropertyChanging();
			entity.Pacientes = this;
		}
		
		private void detach_HistorialMedico(HistorialMedico entity)
		{
			this.SendPropertyChanging();
			entity.Pacientes = null;
		}
		
		private void attach_Facturacion(Facturacion entity)
		{
			this.SendPropertyChanging();
			entity.Pacientes = this;
		}
		
		private void detach_Facturacion(Facturacion entity)
		{
			this.SendPropertyChanging();
			entity.Pacientes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medicos")]
	public partial class Medicos : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MedicoID;
		
		private string _Nombre;
		
		private string _Apellido;
		
		private string _Especialidad;
		
		private string _Telefono;
		
		private string _Email;
		
		private EntitySet<Citas> _Citas;
		
		private EntitySet<Tratamientos> _Tratamientos;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMedicoIDChanging(int value);
    partial void OnMedicoIDChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnApellidoChanging(string value);
    partial void OnApellidoChanged();
    partial void OnEspecialidadChanging(string value);
    partial void OnEspecialidadChanged();
    partial void OnTelefonoChanging(string value);
    partial void OnTelefonoChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Medicos()
		{
			this._Citas = new EntitySet<Citas>(new Action<Citas>(this.attach_Citas), new Action<Citas>(this.detach_Citas));
			this._Tratamientos = new EntitySet<Tratamientos>(new Action<Tratamientos>(this.attach_Tratamientos), new Action<Tratamientos>(this.detach_Tratamientos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MedicoID
		{
			get
			{
				return this._MedicoID;
			}
			set
			{
				if ((this._MedicoID != value))
				{
					this.OnMedicoIDChanging(value);
					this.SendPropertyChanging();
					this._MedicoID = value;
					this.SendPropertyChanged("MedicoID");
					this.OnMedicoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Apellido", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Apellido
		{
			get
			{
				return this._Apellido;
			}
			set
			{
				if ((this._Apellido != value))
				{
					this.OnApellidoChanging(value);
					this.SendPropertyChanging();
					this._Apellido = value;
					this.SendPropertyChanged("Apellido");
					this.OnApellidoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Especialidad", DbType="VarChar(100)")]
		public string Especialidad
		{
			get
			{
				return this._Especialidad;
			}
			set
			{
				if ((this._Especialidad != value))
				{
					this.OnEspecialidadChanging(value);
					this.SendPropertyChanging();
					this._Especialidad = value;
					this.SendPropertyChanged("Especialidad");
					this.OnEspecialidadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telefono", DbType="VarChar(15)")]
		public string Telefono
		{
			get
			{
				return this._Telefono;
			}
			set
			{
				if ((this._Telefono != value))
				{
					this.OnTelefonoChanging(value);
					this.SendPropertyChanging();
					this._Telefono = value;
					this.SendPropertyChanged("Telefono");
					this.OnTelefonoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicos_Citas", Storage="_Citas", ThisKey="MedicoID", OtherKey="MedicoID")]
		public EntitySet<Citas> Citas
		{
			get
			{
				return this._Citas;
			}
			set
			{
				this._Citas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicos_Tratamientos", Storage="_Tratamientos", ThisKey="MedicoID", OtherKey="MedicoID")]
		public EntitySet<Tratamientos> Tratamientos
		{
			get
			{
				return this._Tratamientos;
			}
			set
			{
				this._Tratamientos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Citas(Citas entity)
		{
			this.SendPropertyChanging();
			entity.Medicos = this;
		}
		
		private void detach_Citas(Citas entity)
		{
			this.SendPropertyChanging();
			entity.Medicos = null;
		}
		
		private void attach_Tratamientos(Tratamientos entity)
		{
			this.SendPropertyChanging();
			entity.Medicos = this;
		}
		
		private void detach_Tratamientos(Tratamientos entity)
		{
			this.SendPropertyChanging();
			entity.Medicos = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Citas")]
	public partial class Citas : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CitaID;
		
		private int _PacienteID;
		
		private int _MedicoID;
		
		private System.DateTime _FechaHora;
		
		private string _MotivoConsulta;
		
		private EntityRef<Medicos> _Medicos;
		
		private EntityRef<Pacientes> _Pacientes;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCitaIDChanging(int value);
    partial void OnCitaIDChanged();
    partial void OnPacienteIDChanging(int value);
    partial void OnPacienteIDChanged();
    partial void OnMedicoIDChanging(int value);
    partial void OnMedicoIDChanged();
    partial void OnFechaHoraChanging(System.DateTime value);
    partial void OnFechaHoraChanged();
    partial void OnMotivoConsultaChanging(string value);
    partial void OnMotivoConsultaChanged();
    #endregion
		
		public Citas()
		{
			this._Medicos = default(EntityRef<Medicos>);
			this._Pacientes = default(EntityRef<Pacientes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CitaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CitaID
		{
			get
			{
				return this._CitaID;
			}
			set
			{
				if ((this._CitaID != value))
				{
					this.OnCitaIDChanging(value);
					this.SendPropertyChanging();
					this._CitaID = value;
					this.SendPropertyChanged("CitaID");
					this.OnCitaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PacienteID", DbType="Int NOT NULL")]
		public int PacienteID
		{
			get
			{
				return this._PacienteID;
			}
			set
			{
				if ((this._PacienteID != value))
				{
					if (this._Pacientes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPacienteIDChanging(value);
					this.SendPropertyChanging();
					this._PacienteID = value;
					this.SendPropertyChanged("PacienteID");
					this.OnPacienteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicoID", DbType="Int NOT NULL")]
		public int MedicoID
		{
			get
			{
				return this._MedicoID;
			}
			set
			{
				if ((this._MedicoID != value))
				{
					if (this._Medicos.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicoIDChanging(value);
					this.SendPropertyChanging();
					this._MedicoID = value;
					this.SendPropertyChanged("MedicoID");
					this.OnMedicoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FechaHora", DbType="DateTime NOT NULL")]
		public System.DateTime FechaHora
		{
			get
			{
				return this._FechaHora;
			}
			set
			{
				if ((this._FechaHora != value))
				{
					this.OnFechaHoraChanging(value);
					this.SendPropertyChanging();
					this._FechaHora = value;
					this.SendPropertyChanged("FechaHora");
					this.OnFechaHoraChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotivoConsulta", DbType="VarChar(500)")]
		public string MotivoConsulta
		{
			get
			{
				return this._MotivoConsulta;
			}
			set
			{
				if ((this._MotivoConsulta != value))
				{
					this.OnMotivoConsultaChanging(value);
					this.SendPropertyChanging();
					this._MotivoConsulta = value;
					this.SendPropertyChanged("MotivoConsulta");
					this.OnMotivoConsultaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicos_Citas", Storage="_Medicos", ThisKey="MedicoID", OtherKey="MedicoID", IsForeignKey=true)]
		public Medicos Medicos
		{
			get
			{
				return this._Medicos.Entity;
			}
			set
			{
				Medicos previousValue = this._Medicos.Entity;
				if (((previousValue != value) 
							|| (this._Medicos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medicos.Entity = null;
						previousValue.Citas.Remove(this);
					}
					this._Medicos.Entity = value;
					if ((value != null))
					{
						value.Citas.Add(this);
						this._MedicoID = value.MedicoID;
					}
					else
					{
						this._MedicoID = default(int);
					}
					this.SendPropertyChanged("Medicos");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pacientes_Citas", Storage="_Pacientes", ThisKey="PacienteID", OtherKey="PacienteID", IsForeignKey=true)]
		public Pacientes Pacientes
		{
			get
			{
				return this._Pacientes.Entity;
			}
			set
			{
				Pacientes previousValue = this._Pacientes.Entity;
				if (((previousValue != value) 
							|| (this._Pacientes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pacientes.Entity = null;
						previousValue.Citas.Remove(this);
					}
					this._Pacientes.Entity = value;
					if ((value != null))
					{
						value.Citas.Add(this);
						this._PacienteID = value.PacienteID;
					}
					else
					{
						this._PacienteID = default(int);
					}
					this.SendPropertyChanged("Pacientes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tratamientos")]
	public partial class Tratamientos : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TratamientoID;
		
		private int _PacienteID;
		
		private int _MedicoID;
		
		private System.DateTime _FechaTratamiento;
		
		private string _Descripcion;
		
		private System.Nullable<decimal> _Costo;
		
		private EntitySet<Facturacion> _Facturacion;
		
		private EntityRef<Medicos> _Medicos;
		
		private EntityRef<Pacientes> _Pacientes;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTratamientoIDChanging(int value);
    partial void OnTratamientoIDChanged();
    partial void OnPacienteIDChanging(int value);
    partial void OnPacienteIDChanged();
    partial void OnMedicoIDChanging(int value);
    partial void OnMedicoIDChanged();
    partial void OnFechaTratamientoChanging(System.DateTime value);
    partial void OnFechaTratamientoChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnCostoChanging(System.Nullable<decimal> value);
    partial void OnCostoChanged();
    #endregion
		
		public Tratamientos()
		{
			this._Facturacion = new EntitySet<Facturacion>(new Action<Facturacion>(this.attach_Facturacion), new Action<Facturacion>(this.detach_Facturacion));
			this._Medicos = default(EntityRef<Medicos>);
			this._Pacientes = default(EntityRef<Pacientes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TratamientoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TratamientoID
		{
			get
			{
				return this._TratamientoID;
			}
			set
			{
				if ((this._TratamientoID != value))
				{
					this.OnTratamientoIDChanging(value);
					this.SendPropertyChanging();
					this._TratamientoID = value;
					this.SendPropertyChanged("TratamientoID");
					this.OnTratamientoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PacienteID", DbType="Int NOT NULL")]
		public int PacienteID
		{
			get
			{
				return this._PacienteID;
			}
			set
			{
				if ((this._PacienteID != value))
				{
					if (this._Pacientes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPacienteIDChanging(value);
					this.SendPropertyChanging();
					this._PacienteID = value;
					this.SendPropertyChanged("PacienteID");
					this.OnPacienteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicoID", DbType="Int NOT NULL")]
		public int MedicoID
		{
			get
			{
				return this._MedicoID;
			}
			set
			{
				if ((this._MedicoID != value))
				{
					if (this._Medicos.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicoIDChanging(value);
					this.SendPropertyChanging();
					this._MedicoID = value;
					this.SendPropertyChanged("MedicoID");
					this.OnMedicoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FechaTratamiento", DbType="Date NOT NULL")]
		public System.DateTime FechaTratamiento
		{
			get
			{
				return this._FechaTratamiento;
			}
			set
			{
				if ((this._FechaTratamiento != value))
				{
					this.OnFechaTratamientoChanging(value);
					this.SendPropertyChanging();
					this._FechaTratamiento = value;
					this.SendPropertyChanged("FechaTratamiento");
					this.OnFechaTratamientoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descripcion", DbType="VarChar(500)")]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Costo", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> Costo
		{
			get
			{
				return this._Costo;
			}
			set
			{
				if ((this._Costo != value))
				{
					this.OnCostoChanging(value);
					this.SendPropertyChanging();
					this._Costo = value;
					this.SendPropertyChanged("Costo");
					this.OnCostoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tratamientos_Facturacion", Storage="_Facturacion", ThisKey="TratamientoID", OtherKey="TratamientoID")]
		public EntitySet<Facturacion> Facturacion
		{
			get
			{
				return this._Facturacion;
			}
			set
			{
				this._Facturacion.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicos_Tratamientos", Storage="_Medicos", ThisKey="MedicoID", OtherKey="MedicoID", IsForeignKey=true)]
		public Medicos Medicos
		{
			get
			{
				return this._Medicos.Entity;
			}
			set
			{
				Medicos previousValue = this._Medicos.Entity;
				if (((previousValue != value) 
							|| (this._Medicos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medicos.Entity = null;
						previousValue.Tratamientos.Remove(this);
					}
					this._Medicos.Entity = value;
					if ((value != null))
					{
						value.Tratamientos.Add(this);
						this._MedicoID = value.MedicoID;
					}
					else
					{
						this._MedicoID = default(int);
					}
					this.SendPropertyChanged("Medicos");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pacientes_Tratamientos", Storage="_Pacientes", ThisKey="PacienteID", OtherKey="PacienteID", IsForeignKey=true)]
		public Pacientes Pacientes
		{
			get
			{
				return this._Pacientes.Entity;
			}
			set
			{
				Pacientes previousValue = this._Pacientes.Entity;
				if (((previousValue != value) 
							|| (this._Pacientes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pacientes.Entity = null;
						previousValue.Tratamientos.Remove(this);
					}
					this._Pacientes.Entity = value;
					if ((value != null))
					{
						value.Tratamientos.Add(this);
						this._PacienteID = value.PacienteID;
					}
					else
					{
						this._PacienteID = default(int);
					}
					this.SendPropertyChanged("Pacientes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Facturacion(Facturacion entity)
		{
			this.SendPropertyChanging();
			entity.Tratamientos = this;
		}
		
		private void detach_Facturacion(Facturacion entity)
		{
			this.SendPropertyChanging();
			entity.Tratamientos = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HistorialMedico")]
	public partial class HistorialMedico : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HistorialID;
		
		private int _PacienteID;
		
		private System.DateTime _FechaActualizacion;
		
		private string _Detalles;
		
		private EntityRef<Pacientes> _Pacientes;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHistorialIDChanging(int value);
    partial void OnHistorialIDChanged();
    partial void OnPacienteIDChanging(int value);
    partial void OnPacienteIDChanged();
    partial void OnFechaActualizacionChanging(System.DateTime value);
    partial void OnFechaActualizacionChanged();
    partial void OnDetallesChanging(string value);
    partial void OnDetallesChanged();
    #endregion
		
		public HistorialMedico()
		{
			this._Pacientes = default(EntityRef<Pacientes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HistorialID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HistorialID
		{
			get
			{
				return this._HistorialID;
			}
			set
			{
				if ((this._HistorialID != value))
				{
					this.OnHistorialIDChanging(value);
					this.SendPropertyChanging();
					this._HistorialID = value;
					this.SendPropertyChanged("HistorialID");
					this.OnHistorialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PacienteID", DbType="Int NOT NULL")]
		public int PacienteID
		{
			get
			{
				return this._PacienteID;
			}
			set
			{
				if ((this._PacienteID != value))
				{
					if (this._Pacientes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPacienteIDChanging(value);
					this.SendPropertyChanging();
					this._PacienteID = value;
					this.SendPropertyChanged("PacienteID");
					this.OnPacienteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FechaActualizacion", DbType="DateTime NOT NULL")]
		public System.DateTime FechaActualizacion
		{
			get
			{
				return this._FechaActualizacion;
			}
			set
			{
				if ((this._FechaActualizacion != value))
				{
					this.OnFechaActualizacionChanging(value);
					this.SendPropertyChanging();
					this._FechaActualizacion = value;
					this.SendPropertyChanged("FechaActualizacion");
					this.OnFechaActualizacionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Detalles", DbType="VarChar(MAX)")]
		public string Detalles
		{
			get
			{
				return this._Detalles;
			}
			set
			{
				if ((this._Detalles != value))
				{
					this.OnDetallesChanging(value);
					this.SendPropertyChanging();
					this._Detalles = value;
					this.SendPropertyChanged("Detalles");
					this.OnDetallesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pacientes_HistorialMedico", Storage="_Pacientes", ThisKey="PacienteID", OtherKey="PacienteID", IsForeignKey=true)]
		public Pacientes Pacientes
		{
			get
			{
				return this._Pacientes.Entity;
			}
			set
			{
				Pacientes previousValue = this._Pacientes.Entity;
				if (((previousValue != value) 
							|| (this._Pacientes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pacientes.Entity = null;
						previousValue.HistorialMedico.Remove(this);
					}
					this._Pacientes.Entity = value;
					if ((value != null))
					{
						value.HistorialMedico.Add(this);
						this._PacienteID = value.PacienteID;
					}
					else
					{
						this._PacienteID = default(int);
					}
					this.SendPropertyChanged("Pacientes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Facturacion")]
	public partial class Facturacion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FacturaID;
		
		private int _PacienteID;
		
		private int _TratamientoID;
		
		private System.DateTime _FechaFactura;
		
		private decimal _MontoTotal;
		
		private string _Estado;
		
		private EntityRef<Pacientes> _Pacientes;
		
		private EntityRef<Tratamientos> _Tratamientos;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFacturaIDChanging(int value);
    partial void OnFacturaIDChanged();
    partial void OnPacienteIDChanging(int value);
    partial void OnPacienteIDChanged();
    partial void OnTratamientoIDChanging(int value);
    partial void OnTratamientoIDChanged();
    partial void OnFechaFacturaChanging(System.DateTime value);
    partial void OnFechaFacturaChanged();
    partial void OnMontoTotalChanging(decimal value);
    partial void OnMontoTotalChanged();
    partial void OnEstadoChanging(string value);
    partial void OnEstadoChanged();
    #endregion
		
		public Facturacion()
		{
			this._Pacientes = default(EntityRef<Pacientes>);
			this._Tratamientos = default(EntityRef<Tratamientos>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacturaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FacturaID
		{
			get
			{
				return this._FacturaID;
			}
			set
			{
				if ((this._FacturaID != value))
				{
					this.OnFacturaIDChanging(value);
					this.SendPropertyChanging();
					this._FacturaID = value;
					this.SendPropertyChanged("FacturaID");
					this.OnFacturaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PacienteID", DbType="Int NOT NULL")]
		public int PacienteID
		{
			get
			{
				return this._PacienteID;
			}
			set
			{
				if ((this._PacienteID != value))
				{
					if (this._Pacientes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPacienteIDChanging(value);
					this.SendPropertyChanging();
					this._PacienteID = value;
					this.SendPropertyChanged("PacienteID");
					this.OnPacienteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TratamientoID", DbType="Int NOT NULL")]
		public int TratamientoID
		{
			get
			{
				return this._TratamientoID;
			}
			set
			{
				if ((this._TratamientoID != value))
				{
					if (this._Tratamientos.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTratamientoIDChanging(value);
					this.SendPropertyChanging();
					this._TratamientoID = value;
					this.SendPropertyChanged("TratamientoID");
					this.OnTratamientoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FechaFactura", DbType="Date NOT NULL")]
		public System.DateTime FechaFactura
		{
			get
			{
				return this._FechaFactura;
			}
			set
			{
				if ((this._FechaFactura != value))
				{
					this.OnFechaFacturaChanging(value);
					this.SendPropertyChanging();
					this._FechaFactura = value;
					this.SendPropertyChanged("FechaFactura");
					this.OnFechaFacturaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MontoTotal", DbType="Decimal(10,2) NOT NULL")]
		public decimal MontoTotal
		{
			get
			{
				return this._MontoTotal;
			}
			set
			{
				if ((this._MontoTotal != value))
				{
					this.OnMontoTotalChanging(value);
					this.SendPropertyChanging();
					this._MontoTotal = value;
					this.SendPropertyChanged("MontoTotal");
					this.OnMontoTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Estado", DbType="VarChar(50)")]
		public string Estado
		{
			get
			{
				return this._Estado;
			}
			set
			{
				if ((this._Estado != value))
				{
					this.OnEstadoChanging(value);
					this.SendPropertyChanging();
					this._Estado = value;
					this.SendPropertyChanged("Estado");
					this.OnEstadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pacientes_Facturacion", Storage="_Pacientes", ThisKey="PacienteID", OtherKey="PacienteID", IsForeignKey=true)]
		public Pacientes Pacientes
		{
			get
			{
				return this._Pacientes.Entity;
			}
			set
			{
				Pacientes previousValue = this._Pacientes.Entity;
				if (((previousValue != value) 
							|| (this._Pacientes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pacientes.Entity = null;
						previousValue.Facturacion.Remove(this);
					}
					this._Pacientes.Entity = value;
					if ((value != null))
					{
						value.Facturacion.Add(this);
						this._PacienteID = value.PacienteID;
					}
					else
					{
						this._PacienteID = default(int);
					}
					this.SendPropertyChanged("Pacientes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tratamientos_Facturacion", Storage="_Tratamientos", ThisKey="TratamientoID", OtherKey="TratamientoID", IsForeignKey=true)]
		public Tratamientos Tratamientos
		{
			get
			{
				return this._Tratamientos.Entity;
			}
			set
			{
				Tratamientos previousValue = this._Tratamientos.Entity;
				if (((previousValue != value) 
							|| (this._Tratamientos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tratamientos.Entity = null;
						previousValue.Facturacion.Remove(this);
					}
					this._Tratamientos.Entity = value;
					if ((value != null))
					{
						value.Facturacion.Add(this);
						this._TratamientoID = value.TratamientoID;
					}
					else
					{
						this._TratamientoID = default(int);
					}
					this.SendPropertyChanged("Tratamientos");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
